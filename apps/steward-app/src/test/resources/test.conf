shrine {
  pmEndpoint {
    url = "http://shrine-dev2.catalyst/i2b2/services/PMService/getServices"
  }
  ontEndpoint {
    url = "http://shrine-dev2.catalyst/i2b2/rest/OntologyService/"
  }
  hiveCredentials {
    domain = "i2b2demo"
    username = "demo"
    password = "demouser"
    crcProjectId = "Demo"
    ontProjectId = "SHRINE"
  }
  breakdownResultOutputTypes {
    PATIENT_AGE_COUNT_XML {
      description = "Age patient breakdown"
    }
    PATIENT_RACE_COUNT_XML {
      description = "Race patient breakdown"
    }
    PATIENT_VITALSTATUS_COUNT_XML {
      description = "Vital Status patient breakdown"
    }
    PATIENT_GENDER_COUNT_XML {
      description = "Gender patient breakdown"
    }
  }
  queryEntryPoint {
    authenticationType = "pm"
    authorizationType = "none"
    broadcasterServiceEndpoint {
      url = "https://shrine-dev1.catalyst:6443/shrine/rest/broadcaster/broadcast"
    }
    shrineSteward {
      qepUserName = "qep"
      qepPassword = "trustme"
      stewardBaseUrl = "https://shrine-dev2.catalyst:6443"
    }
    includeAggregateResults = false
    maxQueryWaitTime {
      minutes = 5
    }
    attachSigningCert = true
  }
  adapter {
    crcEndpoint {
      url = "http://shrine-dev2.catalyst/i2b2/services/QueryToolService/"
    }
    setSizeObfuscation = true
    adapterLockoutAttemptsThreshold = 1000
    adapterMappingsFileName = "AdapterMappings.xml"
    maxSignatureAge {
      minutes = 5
    }
    immediatelyRunIncomingQueries = true
  }
  networkStatusQuery = "\\\\SHRINE\\SHRINE\\Demographics\\Gender\\Male\\"
  humanReadableNodeName = "shrine-dev2"
  shrineDatabaseType = "mysql"
  keystore {
    file = "/opt/shrine/shrine.keystore"
    password = "changeit"
    privateKeyAlias = "shrine-dev2.catalyst"
    keyStoreType = "JKS"
    trustModelIsHub = true
    isHub = false
    caCertAliases = [
      "shrine-dev-ca"
    ]
  }
  problem {
    database {
      createTablesOnStart = false
      dataSourceFrom = "JNDI"
      jndiDataSourceName = "java:comp/env/jdbc/problemDB"
      slickProfileClassName = "slick.driver.MySQLDriver$"
    }
  }
  authenticate {
    usersource {
      domain = "i2b2demo"
    }
  }
  steward {
    createTopicsMode = "Pending"
    database {
      dataSourceFrom = "JNDI"
      jndiDataSourceName = "java:comp/env/jdbc/stewardDB"
      slickProfileClassName = "slick.driver.MySQLDriver$"
    }
    emailDataSteward {
      sendAuditEmails = false
    }
  }
}
akka {
  loglevel = "INFO"
  loggers = [
    "akka.event.slf4j.Slf4jLogger"
  ]
}
