package net.shrine.qep.dao

import java.util.Date
import org.junit.Test
import net.shrine.qep.dao.model.AuditEntry
import net.shrine.qep.dao.squeryl.tables.Tables
import net.shrine.qep.dao.squeryl.SquerylEntryPoint
import scala.util.Random

/**
 * @author ??
 * @author Clint Gilbert
 * @date ??
 * Ported to Scala on Feb 28, 2012
 *
 */
final class AuditDaoTest extends AbstractAuditDaoTest {

  private val numDummyEntries = 20

  @Test
  def testGetRecentEntries = withDummyEntries {
    val limit = numDummyEntries / 2

    val entries = auditDao.findRecentEntries(limit)

    entries should not be (null)
    entries.isEmpty should be(false)
    entries.size should equal(limit)

    assertDateInDescendingOrder(entries)
  }

  private def assertDateInDescendingOrder(entries: Seq[AuditEntry]) {
    for (Seq(left, right) <- entries.sliding(2)) {
      (left.time.getTime > right.time.getTime) should be(true)
    }

    entries should equal(entries.sortBy(_.time.getTime).reverse)
  }

  private def withDummyEntries(f: => Any) = afterMakingTables {
    addDummyEntries()

    f
  }

  private def addDummyEntries() {
    SquerylEntryPoint.inTransaction {
      val entries = for {
        i <- 0 until numDummyEntries
      } yield addNewAuditEntry(i, new Date(1000 * i))

      //Make sure ids are autogenerated as expected, that is, a new entry should have an id that's 1 greater than the last entry's 
      entries.sliding(2).foreach {
        case Seq(lhs, rhs) =>
          (rhs.id - lhs.id) should equal(1L)
      }
    }
  }

  private val rand = new Random
  
  private def addNewAuditEntry(i: Int, date: Date): AuditEntry = {
    val project = s"project$i"
    val username = s"username$i"
    val domain = s"domain$i"
    val queryText = s"query$i"
    val queryTopic: Option[String] = if(rand.nextBoolean) Some(s"topic$i") else None

    auditDao.addAuditEntry(date, project, domain, username, queryText, queryTopic)

    val Seq(entry) = auditDao.findRecentEntries(1)

    entry.id.asInstanceOf[AnyRef] should not be (null)
    entry.domain should equal(domain)
    entry.username should equal(username)
    entry.project should equal(project)
    entry.queryText should equal(Some(queryText))
    entry.queryTopic should equal(queryTopic)
    entry.time.getTime should equal(date.getTime)

    entry
  }
}
