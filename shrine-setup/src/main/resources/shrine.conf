shrine {
  metaData {
    ping = "pong"
  }

  messagequeue {
    blockingq {
      serverUrl = "https://localhost:6443/shrine-metadata/mom"
      // webClientTimeOut = 10 seconds
      // messageRedeliveryDelay = 1 day
      // messageMaxDeliveryAttempts = -1
      // receiveWaitTime = "15 seconds"
      // messageTimeToLive = 4 days
    }
    // If you intend for your node to serve as this SHRINE network's messaging hub,
    // then set shrine.messagequeue.blockginqWebApi.enabled to true in your shrine.conf.
    // You do not want to do this unless you are the hub admin
//    blockingqWebApi {
      // enabled = false
//    }
//    httpClient {
//      defaultTimeOut = 10 seconds
//      timeOutWaitGap = 1 second
//    }
//    implementation = "net.shrine.messagequeueclient.MessageQueueWebClient" //Fully-qualified class name of the MessaageQueueService to use
  }

  pmEndpoint {
    url = "http://shrine-dev1.catalyst/i2b2/services/PMService/getServices" //use your i2b2 pm url
  }
  ontEndpoint {
    url = "http://shrine-dev1.catalyst/i2b2/rest/OntologyService/" //use your i2b2 ontology url
  }
  hiveCredentials {
    //use your i2b2 hive credentials
    domain = "i2b2demo"
    username = "demo"
    password = "examplePassword"
    crcProjectId = "Demo"
    ontProjectId = "SHRINE"
  }

  breakdownResultOutputTypes {
    //use breakdown values appropriate for your shrine network
//    PATIENT_AGE_COUNT_XML {
//      description = "Age patient breakdown"
//    }
//    PATIENT_RACE_COUNT_XML {
//      description = "Race patient breakdown"
//    }
//    PATIENT_VITALSTATUS_COUNT_XML {
//      description = "Vital Status patient breakdown"
//    }
//    PATIENT_GENDER_COUNT_XML {
//      description = "Gender patient breakdown"
//    }
  }

  authenticate {
    //    realm = "SHRINE Researcher API"
    usersource {
      domain = "i2b2demo"  //you must provide your own domain
    }
  }

  queryEntryPoint {
    broadcasterServiceEndpoint {
      url = "http://example.com/shrine/rest/broadcaster/broadcast" //url for the hub
      //      timeout {
      //        seconds = 1
      //      }
    }

    //    create = true //false for no qep
//    audit {
//      collectQepAudit = true //false to not use the 1.20 audit db tables
//      database {
//        dataSourceFrom = "JNDI" //Can be JNDI or testDataSource . Use testDataSource for tests, JNDI everywhere else
//        jndiDataSourceName = "java:comp/env/jdbc/qepAuditDB" //or leave out for tests
//        slickProfileClassName = "slick.jdbc.MySQLProfile$" // Can be
        //        slick.jdbc.H2Profile$
        //        slick.jdbc.MySQLProfile$
        //        slick.jdbc.PostgresProfile$
        //        slick.jdbc.SQLServerProfile$
        //        slick.jdbc.JdbcProfile
        //        slick.jdbc.OracleProfile$
        //        slick.jdbc.SQLServerProfile$
        //
        //        (Yes, with the $ on the end)

        // For testing without JNDI
        //      testDataSource {

        //typical test settings for unit tests
        //driverClassName = "org.h2.Driver"

        //url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1" //H2 embedded in-memory for unit tests
        //url = "jdbc:h2:~/stewardTest.h2" //H2 embedded on disk at ~/test
        //      }
//        timeout = 30 //time to wait before db gives up, in seconds.
//        createTablesOnStart = false //for testing with H2 in memory, when not running unit tests. Set to false normally
//      }
//    }
//    trustModelIsHub = true  // true by default, false for P2P networks.

//    authenticationType = "pm" //can be none, pm, or ecommons

//    authorizationType = "shrine-steward" //can be none, shrine-steward, or hms-steward

    //hms-steward config
    //    sheriffEndpoint {
    //      url = "http://localhost:8080/shrine-hms-authorization/queryAuthorization"
    //      timeout {
    //        seconds = 1
    //      }
    //    }

    //    sheriffCredentials {
    //      username = "sheriffUsername"
    //      password = "sheriffPassword"
    //    }

    //shrine-steward config
    shrineSteward {
      qepUserName = "qep"
      qepPassword = "trustme"
      stewardBaseUrl = "https://localhost:6443"
    }

    //    includeAggregateResults = false
    //
    //    maxQueryWaitTime {
    //      minutes = 5 //must be longer than the hub's maxQueryWaitTime
    //    }
  }

  hub {
//    create = false //change to true to start a hub. If false then the entire hub section can be left out
    maxQueryWaitTime {
      minutes = 4.5 //Needs to be longer than the adapter's maxQueryWaitTime, but shorter than the qep's
    }
    downstreamNodes { //Add your downstream nodes here
      shrine-dev2 = "https://shrine-dev2.catalyst:6443/shrine/rest/adapter/requests"
    }
    shouldQuerySelf = false //true if there is an adapter at the hub , or just add a loopback address to downstreamNodes
  }

  adapter {
//    create = true by default. False to not create an adapter.
    crcEndpoint {
      //must be filled in      url = "http://shrine-dev1.catalyst/i2b2/services/QueryToolService/"
    }
    setSizeObfuscation = true  //must be set. false turns off obfuscation
    adapterMappingsFileName = "AdapterMappings.xml"
    maxSignatureAge {
      minutes = 5 //must be longer than the hub's maxQueryWaitTime
    }
    immediatelyRunIncomingQueries = true //false to queue them
//    audit {
//      collectAdapterAudit = true by default. False to not fill in the audit database
//      database {
//        dataSourceFrom = "JNDI" //Can be JNDI or testDataSource . Use testDataSource for tests, JNDI everywhere else
//        jndiDataSourceName = "java:comp/env/jdbc/adapterAuditDB" //or leave out for tests
    //        slickProfileClassName = "slick.jdbc.MySQLProfile$" // Can be
    //        slick.jdbc.H2Profile$
    //        slick.jdbc.MySQLProfile$
    //        slick.jdbc.PostgresProfile$
    //        slick.jdbc.SQLServerProfile$
    //        slick.jdbc.JdbcProfile
    //        slick.jdbc.OracleProfile$
    //        slick.jdbc.SQLServerProfile$
        //
        //        (Yes, with the $ on the end)

        // For testing without JNDI
        //      testDataSource {

        //typical test settings for unit tests
        //driverClassName = "org.h2.Driver"

        //url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1" //H2 embedded in-memory for unit tests
        //url = "jdbc:h2:~/stewardTest.h2" //H2 embedded on disk at ~/test
        //      }
//        createTablesOnStart = false //for testing with H2 in memory, when not running unit tests. Set to false normally
//      }
//    obfuscation {
//      binSize = 5 by default //Round to the nearest binSize. Use 1 for no effect (to match SHRINE 1.21 and earlier).
//      sigma = 6.5 by default //Noise to inject. Use 0 for no effect. (Use 1.33 to match SHRINE 1.21 and earlier).
//      clamp = 10 by default //Maximum ammount of noise to inject. (Use 3 to match SHRINE 1.21 and earlier).
//    }

//    adapterLockoutAttemptsThreshold = 0 by default // Number of allowed queries with the same actual result that can exist before a researcher is locked out of the adapter. In 1.24 the lockout code and this config value will be removed

//    botDefense {
//      countsAndMilliseconds = [  //to turn off, use an empty json list
//        {count = 10, milliseconds = 60000}, //allow up to 10 queries in one minute by default
//        {count = 200, milliseconds = 36000000} //allow up to 4 queries in 10 hours by default
//      ]
//   }

    //delayResponse = "0 seconds" //time to delay before responding to a query. Should be 0 except for testing in shrine-qa
  }

  networkStatusQuery = "\\\\SHRINE\\SHRINE\\Demographics\\Gender\\Male\\"
  humanReadableNodeName = "shrine-dev1"
  shrineDatabaseType = "mysql"

  keystore {
    file = "/opt/shrine/shrine.keystore"
    password = "changeit"
    privateKeyAlias = "shrine-dev1.catalyst"
    keyStoreType = "JKS"
    caCertAliases = [
      "shrine-dev-ca"
    ]
  }
//  problem {
//    problemHandler = "net.shrine.problem.LogAndDatabaseProblemHandler$" Can be other specialized problemHandler implementations
//    database {
//      dataSourceFrom = "JNDI" //Can be JNDI or testDataSource . Use testDataSource for tests, JNDI everywhere else
//      jndiDataSourceName = "java:comp/env/jdbc/problemDB"
//        slickProfileClassName = "slick.jdbc.MySQLProfile$" // Can be
      //        slick.jdbc.H2Profile$
      //        slick.jdbc.MySQLProfile$
      //        slick.jdbc.PostgresProfile$
      //        slick.jdbc.SQLServerProfile$
      //        slick.jdbc.JdbcProfile
      //        slick.jdbc.OracleProfile$
      //        slick.jdbc.SQLServerProfile$
      //
      //        (Yes, with the $ on the end)

      // For testing without JNDI
      //      testDataSource {

      //typical test settings for unit tests
      //driverClassName = "org.h2.Driver"

      //url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1" //H2 embedded in-memory for unit tests
      //url = "jdbc:h2:~/stewardTest.h2" //H2 embedded on disk at ~/test
      //      }
//      createTablesOnStart = false //for testing with H2 in memory, when not running unit tests. Set to false normally
//    }
//  }
//  dashboard {
//    gruntWatch = false //false for production, true for mvn tomcat7:run . Allows the client javascript and html files to be loaded via gruntWatch .
//    happyBaseUrl = "https://localhost:6443/shrine/rest/happy" If the shine servlet is running on a different machime from the dashboard, change this URL to match
//    statusBaseUrl = "https://localhost:6443/shrine/rest/internalstatus" If the shine servlet is running on a different machime from the dashboard, change this URL to match

//  }
//  status {
    //permittedHostOfOrigin = "localhost" //If absent then get the host name via java.net.InetAddress.getLocalHost.getHostName . Override to control
  }

//Get the older squerl-basd databases through JNDI (inside of tomcant, using tomcat's db connection pool) or directly via a db config here (for testing
//  squerylDataSource {
//    database {
//      dataSourceFrom = "JNDI" //Can be JNDI or testDataSource . Use testDataSource for tests, JNDI everywhere else
//      jndiDataSourceName = "java:comp/env/jdbc/shrineDB" //or leave out for tests
//    }
//  }

  steward {

//    createTopicsMode = Pending  //Can be Pending, Approved, or TopcisIgnoredJustLog. Pending by default
    //Pending - new topics start in the Pending state; researchers must wait for the Steward to approve them
    //Approved - new topics start in the Approved state; researchers can use them immediately
    //TopicsIgnoredJustLog - all queries are logged and approved; researchers don't need to create topics

    emailDataSteward {
//      sendAuditEmails = true  //false to turn off the whole works of emailing the data steward
      //You must provide the email address of the shrine node system admin, to handle bounces and invalid addresses
      //from = "shrine-admin@example.com"
      //You must provide the email address of the data steward
      //to = "shrine-steward@example.com"

//      interval = "1 day" //Audit researchers daily
//      timeAfterMidnight = "6 hours" //Audit researchers at 6 am. If the interval is less than 1 day then this delay is ignored.
//      maxQueryCountBetweenAudits = 30 //If a researcher runs more than this many queries since the last audit audit her
//      minTimeBetweenAudits = "30 days" //If a researcher runs at least one query, audit those queries if this much time has passed

//      subject = "Audit SHRINE researchers"
      //The baseUrl for the data steward to be substituted in to email text. Must be supplied if it is used in the email text.
      //stewardBaseUrl = "https://example.com:8443/steward/"

      //Text to use for the email audit.
      // AUDIT_LINES will be replaced by a researcherLine for each researcher to audit.
      // STEWARD_BASE_URL will be replaced by the value in stewardBaseUrl if available.
//      emailBody = """Please audit the following users at STEWARD_BASE_URL at your earliest convinience:
//
//AUDIT_LINES""" //note that this can be a multiline message

      //Text to use per researcher to audit.
      //FULLNAME, USERNAME, COUNT and LAST_AUDIT_DATE will be replaced with appropriate text.
//      researcherLine = "FULLNAME (USERNAME) has run COUNT queries since LAST_AUDIT_DATE."
    }

//    database {
//      dataSourceFrom = "JNDI" //Can be JNDI or testDataSource . Use testDataSource for tests, JNDI everywhere else
//      jndiDataSourceName = "java:comp/env/jdbc/stewardDB" //or leave out for tests
//        slickProfileClassName = "slick.jdbc.MySQLProfile$" // Can be
      //        slick.jdbc.H2Profile$
      //        slick.jdbc.MySQLProfile$
      //        slick.jdbc.PostgresProfile$
      //        slick.jdbc.SQLServerProfile$
      //        slick.jdbc.JdbcProfile
      //        slick.jdbc.OracleProfile$
      //        slick.jdbc.SQLServerProfile$
      //
      //        (Yes, with the $ on the end)

      // For testing without JNDI
      //      testDataSource {

      //typical test settings for unit tests
      //driverClassName = "org.h2.Driver"

      //url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1" //H2 embedded in-memory for unit tests
      //url = "jdbc:h2:~/stewardTest.h2" //H2 embedded on disk at ~/test
      //      }
//      createTablesOnStart = false // true for testing with H2 in memory, when not running unit tests. Set to false normally
//    }

//    gruntWatch = false //false for production, true for mvn tomcat7:run . Allows the client javascript and html files to be loaded via gruntWatch .

//  }

//  email {
    //add javax mail properties from https://www.tutorialspoint.com/javamail_api/javamail_api_smtp_servers.htm here
//    javaxmail {
//      mail {
//        smtp {
          //for postfix on localhost
//          host = localhost
//          port = 25

          //for AWS SES - See http://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-using-smtp-java.html
          //        host = email-smtp.us-east-1.amazonaws.com
          //        port = 25
          //        transport.protocol = smtps
          //        auth = true
          //        starttls.enable = true
          //        starttls.required = true
//        }
//      }
//    }
    //Must be set for AWS SES. See http://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-using-smtp-java.html
    //    authenticator {
    //      username = yourUsername
    //      password = yourPassword
    //    }
//  }
}

//Default settings for akka
//akka {
//  loglevel = INFO

  //  log-config-on-start = on
//  loggers = ["akka.event.slf4j.Slf4jLogger"]
  // Toggles whether the threads created by this ActorSystem should be daemons or not. Use daemonic inside of tomcat to support shutdown
//  daemonic = on
//}

//You'll see these settings for spray, baked into the .war files.
//spray.servlet {
//  boot-class = "net.shrine.dashboard.net.shrine.metadata.Boot" //Don't change this one. It'll start the wrong (or no) application if you change it.
//  request-timeout = 30s
//}

